// <auto-generated />
using System;
using Infrastructure.AssetCrafterService;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.AssetCrafterService.Migrations
{
    [DbContext(typeof(PostgresContext))]
    partial class PostgresContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "aal_level", new[] { "aal1", "aal2", "aal3" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "code_challenge_method", new[] { "s256", "plain" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_status", new[] { "unverified", "verified" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_type", new[] { "totp", "webauthn", "phone" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "one_time_token_type", new[] { "confirmation_token", "reauthentication_token", "recovery_token", "email_change_token_new", "email_change_token_current", "phone_change_token" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "realtime", "action", new[] { "INSERT", "UPDATE", "DELETE", "TRUNCATE", "ERROR" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "realtime", "equality_op", new[] { "eq", "neq", "lt", "lte", "gt", "gte", "in" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pg_stat_statements");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pgcrypto");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "uuid-ossp");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "graphql", "pg_graphql");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vault", "supabase_vault");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.AssetCrafterService.Models.Pack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<bool>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_confirmed");

                    b.Property<bool>("IsOfficial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_official");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("packs_pkey");

                    b.ToTable("packs", "asset_crafter_service", t =>
                        {
                            t.HasComment("Паки токенов");
                        });
                });

            modelBuilder.Entity("Infrastructure.AssetCrafterService.Models.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_confirmed");

                    b.Property<bool>("IsOfficial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_official");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<Guid>("Type")
                        .HasColumnType("uuid")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("tokens_pkey");

                    b.HasIndex("Type");

                    b.ToTable("tokens", "asset_crafter_service");
                });

            modelBuilder.Entity("Infrastructure.AssetCrafterService.Models.TokenType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("caption");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("token_types_pkey");

                    b.ToTable("token_types", "asset_crafter_service");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1370cf71-5d4c-4fed-a1a1-d96899a4725c"),
                            Caption = "Персонаж",
                            Name = "character"
                        },
                        new
                        {
                            Id = new Guid("b91d04e3-bfe2-467c-b894-086d4e5812f5"),
                            Caption = "Предмет",
                            Name = "item"
                        },
                        new
                        {
                            Id = new Guid("e180fd1f-4dc3-4797-8af9-27274ce3fc6e"),
                            Caption = "Игровое поле",
                            Name = "map"
                        });
                });

            modelBuilder.Entity("Infrastructure.AssetCrafterService.Models.UserPack", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("granted_at");

                    b.Property<Guid>("PackId")
                        .HasColumnType("uuid")
                        .HasColumnName("pack_id");

                    b.HasKey("UserId")
                        .HasName("user_packs_pkey");

                    b.HasIndex("PackId");

                    b.ToTable("user_packs", "asset_crafter_service", t =>
                        {
                            t.HasComment("Связи пользователей с паками");
                        });
                });

            modelBuilder.Entity("PackToken", b =>
                {
                    b.Property<Guid>("PackId")
                        .HasColumnType("uuid")
                        .HasColumnName("pack_id");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("token_id");

                    b.HasKey("PackId", "TokenId")
                        .HasName("pack_tokens_pkey");

                    b.HasIndex("TokenId");

                    b.ToTable("pack_tokens", "asset_crafter_service", t =>
                        {
                            t.HasComment("Связи между паками и токенами");
                        });
                });

            modelBuilder.Entity("Infrastructure.AssetCrafterService.Models.Token", b =>
                {
                    b.HasOne("Infrastructure.AssetCrafterService.Models.TokenType", "TypeNavigation")
                        .WithMany("Tokens")
                        .HasForeignKey("Type")
                        .IsRequired()
                        .HasConstraintName("tokens_type_fkey");

                    b.Navigation("TypeNavigation");
                });

            modelBuilder.Entity("Infrastructure.AssetCrafterService.Models.UserPack", b =>
                {
                    b.HasOne("Infrastructure.AssetCrafterService.Models.Pack", "Pack")
                        .WithMany("UserPacks")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_packs_pack_id_fkey");

                    b.Navigation("Pack");
                });

            modelBuilder.Entity("PackToken", b =>
                {
                    b.HasOne("Infrastructure.AssetCrafterService.Models.Pack", null)
                        .WithMany()
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pack_tokens_pack_id_fkey");

                    b.HasOne("Infrastructure.AssetCrafterService.Models.Token", null)
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pack_tokens_token_id_fkey");
                });

            modelBuilder.Entity("Infrastructure.AssetCrafterService.Models.Pack", b =>
                {
                    b.Navigation("UserPacks");
                });

            modelBuilder.Entity("Infrastructure.AssetCrafterService.Models.TokenType", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
